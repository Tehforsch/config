"mappings - basic
    " Use space as leader key
    let mapleader = "\<Space>"
    " Map <C-T> to command-t plugin which doesn't seem to work by default
    nnoremap <silent> <Leader>t :CtrlP .<CR>
    " Map <CR> to G so number<CR> jumps to the line which is convenient
    nnoremap <CR> G
    " Map single quote to apostrophe in normal mode (jump to exact mark)
    nnoremap ' `
    " Map # which searches backwards for the current word under the cursor to exact mark jumping
    nnoremap # `
    " Map jumping through changelist to <C-j> and <C-k>
    map <C-k> g;
    map <C-j> g,
    " Write file 
    nnoremap <Leader>w :w<Cr>
    " Close vim
    nnoremap <Leader>q :q<Cr>
    " Switch to last buffer
    noremap <Leader>^ <C-^>
    " Replace the current word with the contents of "1, leave registers intact, jump to beginning of pasted word
    nnoremap <Leader>p "_diwP'[
    " Replace the current selection with the contents of "1, leave registers intact, jump to beginning of pasted word
    vnoremap <Leader>p "_dP'[
    " Replace the current line by the line thats contained in "1, leave registers intact
    nnoremap <Leader>P "_ddP
    vnoremap <Leader>P "_dP
    " Delete line without copying
    nnoremap <Leader>d "_dd
    " Disable ex mode which is only opened because I mess up
    nnoremap Q <nop>
"mappings - editing text
    " Swap the word the cursor is on with the next word (which can be on a
    " newline, and punctuation is "skipped"):
    nnoremap <silent> gw "_yiw:s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR><C-o>:noh<CR>
    " Surround the word under the cursor with {} and start typing a latex command in front of it
    " so we get \TYPEHERE{word}. This will probably create some problems?
    nmap gl ysiw}i\
    " Duplicate the current line and comment out the top one (using vim-commentary)
    nmap <Leader>c yypkgccj
    vmap <Leader>c gcgvyPgvgc
    " Make Y behave like y$ which is analogous to C or D
    nnoremap Y y$
"mappings - command line
    " w!! writes file as sudo if it was opened without
    cnoremap  w!! w !sudo tee % > /dev/null
"mappings for plugins
    " Add quick mappings for sideways.vim that allow shifting of arguments
    nmap <Leader>h :SidewaysLeft<CR>
    nmap <Leader>l :SidewaysRight<CR>
    " Add text objects for sideways.vim
    omap aa <Plug>SidewaysArgumentTextobjA
    xmap aa <Plug>SidewaysArgumentTextobjA
    omap ia <Plug>SidewaysArgumentTextobjI
    xmap ia <Plug>SidewaysArgumentTextobjI
    " Quicker mapping for commenting out lines
    nmap <C-e> gcc
    imap <C-e> <C-o>gcc
    vmap <C-e> gc
    " Open gundo tree
    nnoremap <F6> :GundoToggle<CR>
" mappings - misc
    noremap <F4> :source ~/.vimrc<CR>

" make paragraph motion accept lines containing whitespace as delimiters (stolen from http://stackoverflow.com/a/2777488)
function! ParagraphMove(delta, visual, count)
    normal m'
    normal |
    if a:visual
        normal gv
    endif

    if a:count == 0
        let limit = 1
    else
        let limit = a:count
    endif

    let i = 0
    while i < limit
        if a:delta > 0
            " first whitespace-only line following a non-whitespace character           
            let pos1 = search("\\S", "W")
            let pos2 = search("^\\s*$", "W")
            if pos1 == 0 || pos2 == 0
                let pos = search("\\%$", "W")
            endif
        elseif a:delta < 0
            " first whitespace-only line preceding a non-whitespace character           
            let pos1 = search("\\S", "bW")
            let pos2 = search("^\\s*$", "bW")
            if pos1 == 0 || pos2 == 0
                let pos = search("\\%^", "bW")
            endif
        endif
        let i += 1
    endwhile
    normal |
endfunction

nnoremap <silent> } :<C-U>call ParagraphMove( 1, 0, v:count)<CR>
onoremap <silent> } :<C-U>call ParagraphMove( 1, 0, v:count)<CR>
" vnoremap <silent> } :<C-U>call ParagraphMove( 1, 1)<CR>
nnoremap <silent> { :<C-U>call ParagraphMove(-1, 0, v:count)<CR>
onoremap <silent> { :<C-U>call ParagraphMove(-1, 0, v:count)<CR>
" vnoremap <silent> { :<C-U>call ParagraphMove(-1, 1)<CR>

" moving around, searching and patterns
    " Highlight search while typing
    set incsearch
    " Set ignore case when searching (watch out for smartcase)
    set ignorecase
    " Search case sensitive when pattern contains uppercase characters
    set smartcase
    " Substitute multiple occurences in one line per default
    set gdefault
    " Enable the mouse for scrolling purposes
    " set mouse=a

" internal vim features
    " Disable the interpretation of numbers as octal when using C-A or C-X on numbers like 07
    set nrformats=""

" persistent undo - apparently this is possible
    set undofile
    set undodir=~/.vim/undodir

" syntax, highlighting and spelling
    " Enable syntax highlighting
    syntax on
    " Disable highlighting of matching parantheses (lags)
    let loaded_matchparen = 1
    " Gnuplot comments
    augroup gnuplot
        autocmd!
        autocmd BufNewFile, BufRead *.gpi set filetype gnuplot
        autocmd FileType gnuplot set commentstring=#\ %s
    augroup END

" latex text object for an command of type \command{...}
    vnoremap ac :<C-U>call SelectEntireCommand()<CR>
    onoremap ac :<C-U>call SelectEntireCommand()<CR>
    vnoremap ic :<C-U>call SelectCommandName()<CR>
    onoremap ic :<C-U>call SelectCommandName()<CR>

" multiple files
    set hidden
    set wildignore=*.o,*.pyc,*.class,*.eps,*.pdf,*.log,*.aux,*.dvi,*.out,*.bbl,*.blg,*.toc,*.snm,*.nav
    " Don't write backup and swap files.
    set nobackup
    set nowritebackup
    set noswapfile

" messages and info
    set ruler
    set number
" messages and info in gvim (for eclim mostly)
    set guioptions-=m  "remove menu bar
    set guioptions-=T  "remove toolbar
    set guioptions-=r  "remove right-hand scroll bar
    set guioptions-=L  "remove left-hand scroll bar

" tabs and indenting
    " Tab size 4
    set tabstop=4
    " Convert tabs to spaces
    set expandtab
    " Size of indents with < and > command: 4
    set shiftwidth=4
    " Delete 4 spaces at once when deleting tabs.
    set softtabstop=4

" various
    " Set tab-key behaviour (when opening files).
    set wildmode=longest,list,full
    set wildmenu
    " Fix the delay after ESC - o
    set timeout timeoutlen=1000 ttimeoutlen=100
    " Increase history size.
    set history=2000

" plugin specific settings
    " Php indentation
    let g:PHP_default_indenting = 1
    " Ctrl-P: show dotfiles
    let g:ctrlp_show_hidden = 1
    " Ultisnips
    let g:UltiSnipsExpandTrigger="<tab>"                                            
    let g:UltiSnipsJumpForwardTrigger="<tab>"                                       
    let g:UltiSnipsJumpBackwardTrigger="<s-tab>"        
    " Jedi-Vim - disable autocompletion on dot
    let g:jedi#popup_on_dot = 0
    " Supertab - Complete from top to bottom - I don't quite understand this but it seems more logical to me.
    let g:SuperTabDefaultCompletionType = "<c-n>"

" VUNDLE INITIALIZATION

    set nocompatible              " be iMproved, required
    filetype off                  " required

    " set the runtime path to include Vundle and initialize
    set rtp+=~/.vim/bundle/Vundle.vim
    call vundle#begin()


    " let Vundle manage Vundle, required
    Plugin 'gmarik/Vundle.vim'
    " Comment out lines with gcc, comment out movements/visual selections with gc
    Plugin 'tpope/vim-commentary'
    " Repeat composite commands with .
    Plugin 'tpope/vim-repeat'
    " Surround text objects. example: ysiw( surrounds the word with a bracket.
    Plugin 'tpope/vim-surround'
    " File finder
    Plugin 'ctrlpvim/ctrlp.vim'
    " Ultisnips 
    Plugin 'SirVer/ultisnips'
    Plugin 'honza/vim-snippets'
    " Exchange with cx<operator>
    Plugin 'tommcdo/vim-exchange'
    " Adds function argument text objects
    Plugin 'AndrewRadev/sideways.vim'
    " Supertab - Autocompletion
    Plugin 'ervandew/supertab'
    " Solarized Colorscheme
    Bundle 'altercation/vim-colors-solarized'
    " Undo tree visualization
    Bundle 'sjl/gundo.vim'
    " My own latex command text object plugin
    Bundle 'tehforsch/vimSelectLatexCommand'
    " Adding ended, switch filetype settings back on
    call vundle#end()            " required
    filetype plugin indent on    " required

    " Disable automatic comment insertion when inserting new line while on a commented line
    autocmd FileType * set formatoptions-=c formatoptions-=r formatoptions-=o

" Solarized color scheme
    set t_Co=16
    syntax enable
    set background=dark
    colorscheme solarized

; The custom-file is where emacs writes its weird package configurations. I dont want this in my own dotfile because its ugly and messes up version control.
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file 'noerror)

; Load package
(require 'package)
(add-to-list 'package-archives
    '("melpa" . "https://melpa.org/packages/"))
(package-initialize)

; Refresh on first install
(unless (package-installed-p 'use-package) (package-refresh-contents))
; Load use-package
(unless (package-installed-p 'use-package) (package-install 'use-package))
(eval-when-compile (require 'use-package))

(setq use-package-always-ensure t)

; Load straight
(defvar bootstrap-version)
(let ((bootstrap-file
    (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
    (bootstrap-version 5))
(unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
        "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
        'silent 'inhibit-cookies)
    (goto-char (point-max))
    (eval-print-last-sexp)))
(load bootstrap-file nil 'nomessage))

; Load packages
(use-package evil)
(setq evil-want-C-i-jump nil)
(evil-mode 1)
; Always use evil
(setq evil-emacs-state-odes nil)
(setq evil-insert-state-modes nil)
(setq evil-motion-state-modes nil)
; Make Y kill to EOL instead of an effective remap of yy
(setq evil-want-Y-yank-to-eol t)
; Disable search from wrapping around the buffer (wrapscan=false)
(setq evil-search-wrap nil)
; Make pasting in visual mode not replace the current killring
(setq-default evil-kill-on-visual-paste nil)
;; (define-key evil-visual-state-map "p" 'evil-paste-after-from-0)

(use-package evil-numbers)

(use-package evil-surround
    :config
    ; Remap S to surround instead of ys, S is usually replace entire line which i never use (theres cc for that)
    (evil-define-key 'normal evil-surround-mode-map "S" 'evil-surround-region)
)
(global-evil-surround-mode 1)

(use-package evil-exchange)
(evil-exchange-install)

(use-package evil-commentary)
(evil-commentary-mode)
; Default comment string in files emacs doesnt recognize (no file ending): #
(setq-default comment-start "#")

(define-key evil-normal-state-map (kbd "C-e") 'evil-commentary-line)

(use-package general)

(use-package ivy
    :config
    (ivy-mode 1)
    (define-key ivy-minibuffer-map (kbd "<C-return>") 'ivy-immediate-done)
)

(use-package helm)

(use-package helm-ag)

(use-package helm-flx)

(use-package projectile
    :config
    (setq projectile-mode 1)
    (setq projectile-project-search-path '("~/projects/"))
)
(setq projectile-mode 1)
(setq projectile-project-search-path '("~/projects/"))
(projectile-discover-projects-in-search-path)

(use-package helm-projectile)

(use-package hydra)

(use-package gruvbox-theme)

(use-package which-key
    :config
    (which-key-mode)
    (setq which-key-idle-delay 0.2)
)

; Sometimes links are not recognized as org links. Update org version to deal with this
(require 'package)
(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)

(use-package org-roam
    :hook 
    (after-init . org-roam-mode)
    :straight (:host github :repo "jethrokuan/org-roam" :branch "develop")
    :custom
    (org-roam-directory "~/resource/org/roam")
    ; Use only the id as filename, not the title
)

(setq bibliography-file "~/resource/org/bibliography/library.bib")
(setq bibliography-papers-folder "~/resource/papers")

(use-package deft
    :custom
    (deft-recursive t)
    (deft-use-filter-string-for-filename t)
    (deft-default-extension "org")
    (deft-directory org-roam-directory)
)

(use-package reftex
            :commands turn-on-reftex
            :init
            (progn
                (setq reftex-default-bibliography '(bibliography-file))
                (setq reftex-plug-intoAUCTex t))
            )
(use-package org-ref
    :after org
    :init
    (setq reftex-default-bibliography '("~/resource/org/bibliography/library.bib"))
    (setq org-ref-default-bibliography '("~/resource/org/bibliography/library.bib"))
    (setq org-ref-pdf-directory "~/resource/papers")
    (setq bibtex-completion-bibliography bibliography-file)
    (require 'doi-utils)
    (require 'org-ref-pdf)
    (require 'org-ref-url-utils)
    (require 'org-ref-bibtex)
    (require 'org-ref-latex)
    (require 'org-ref-arxiv)
    (require 'org-ref-pubmed)
    (require 'org-ref-isbn)
    (require 'org-ref-wos)
    (require 'org-ref-scopus)
)

(helm-flx-mode +1)

(general-evil-setup t)
(general-create-definer my-leader-def :prefix "SPC")

; Make C-w delete a word when instead of autocompleting in helm
(with-eval-after-load 'company (define-key company-active-map (kbd "C-w") 'evil-delete-backward-word))
(with-eval-after-load 'helm (define-key helm-map (kbd "C-w") 'evil-delete-backward-word))
; Make C-j and C-k go down/up in helm/ivy
(define-key helm-map (kbd "C-j") 'helm-next-line)
(define-key helm-map (kbd "C-k") 'helm-previous-line)
(define-key ivy-minibuffer-map (kbd "C-w") 'evil-delete-backward-word)
(define-key ivy-minibuffer-map (kbd "C-j") 'ivy-next-line)
(define-key ivy-minibuffer-map (kbd "C-k") 'ivy-previous-line)

; More things escape properly, stolen from https://github.com/davvil/.emacs.d/blob/master/init.el
(defun minibuffer-keyboard-quit ()
  "Abort recursive edit.
In Delete Selection mode, if the mark is active, just deactivate it;
then it takes a second \\[keyboard-quit] to abort the minibuffer."
  (interactive)
  (if (and delete-selection-mode transient-mark-mode mark-active)
      (setq deactivate-mark  t)
    (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
    (abort-recursive-edit)))
(define-key evil-normal-state-map [escape] 'keyboard-quit)
(define-key evil-visual-state-map [escape] 'keyboard-quit)
(define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
(global-set-key [escape] 'evil-exit-emacs-state)
(define-key ivy-minibuffer-map [escape] 'minibuffer-keyboard-quit)

; C-c + and C-c - to indent / decrease numbers as in vim but with different key bindings
(global-set-key (kbd "C-c -") 'evil-numbers/inc-at-pt)
(global-set-key (kbd "C-c +") 'evil-numbers/dec-at-pt)

; Make substitution global by default (reverse meaning of appending g at end of substitution)
(setq evil-ex-substitute-global t)

; Important for triggering inotify events: save even when not modified
(defun save-buffer-always ()
    "Save the buffer even if it is not modified."
    (interactive)
    (set-buffer-modified-p t)
    (save-buffer)
)
; Make sure save-buffer-always doesnt ruin . key state from evil. Not sure if this is actually all that important but someone mentioned it so whatever
(evil-declare-abort-repeat 'save-buffer-always)

; Backup folder
(setq
   backup-by-copying t      ; don't clobber symlinks
   backup-directory-alist
    '(("." . "~/.saves/"))    ; don't litter my fs tree
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t)       ; use versioned backups
; No lock files
(setq backup-directory-alist `(("." . "~/.emacsSaves")))
; Autosave folder
(setq auto-save-file-name-transforms `((".*" "~/.emacsSaves" t)))

(setq create-lockfiles nil)

(defhydra hydra-switch-buffer ()
    "Switch buffer"
    ("n" next-buffer)
    ("p" previous-buffer)
    ("d" kill-this-buffer)
)

(general-evil-define-key 'normal 'global :prefix "SPC"
    "x" 'helm-M-x
    "b" '(:which-key "Buffer")
    "bd" 'kill-this-buffer
    "bm" '(switch-to-buffer "Messages")
    "bf" 'smart-list-buffers
    ; Move to next/previous buffer but stay in buffer switching mode
    "bp" '(lambda () (interactive) (previous-buffer) (hydra-switch-buffer/body))
    "bn" '(lambda () (interactive) (next-buffer) (hydra-switch-buffer/body))
    "f" '(:which-key "File")
    "fs" 'save-buffer-always
    "fo" 'projectile-find-other-file
    "ff" 'smart-list-files
    "fp" 'comment-out-line-and-copypaste-below
    "n" '(:which-key "Notes")
    "nc" '(:which-key "Citations/Bibliography")
    "nca" 'crossref-add-bibtex-entry
    "nci" 'org-ref-insert-link
    "nco" 'open-bibliography
    "nf" 'org-roam-find-file
    "ni" 'org-roam-insert
    "np" 'interleave-mode
    "p" '(:which-key "Project")
    "pa" 'helm-projectile-ag
    "pf" 'helm-projectile-switch-project
    "q" 'kill-emacs
    "t" '(:which-key "Todo")
    "^" 'evil-switch-to-windows-last-buffer
)

(defun open-bibliography ()
    (interactive)
    (find-file "~/resource/org/bibliography/library.bib")
)

; Go to link under cursor
(define-key evil-normal-state-map "gl" 'org-roam-open-at-point)

(defun smart-list-buffers ()
  "Call `helm-projectile-switch-to-buffer' if in projectile project, otherwise fall back to `helm-buffers-list'."
    (interactive)
    (if (projectile-project-p)
        (helm-projectile-switch-to-buffer)
        (helm-buffers-list)
    )
)

(defun smart-list-files ()
    "Call `helm-projectile-find-file' if in projectile project, otherwise fall back to `helm-find-files'."
    (interactive)
    (if (projectile-project-p)
        (helm-projectile-find-file)
        (helm-find-files ".")
    )
)

; Do not truncate lines in org mode
(setq org-startup-truncated nil)
; Location of todolist/agenda
(setq org-agenda-files '("~/resource/org/todo"))
(setq org-agenda-custom-commands
    '(
        ("c" "Simple agenda view" ((agenda "") (alltodo "")))
    )
)

; Always follow symlinks without asking
(setq vc-follow-symlinks t)
; When opening symlink file: Find filetype from symlink (see https://emacs.stackexchange.com/questions/34756/emacs-linked-to-emacs-link-open-emacs-link-in-emacs-lisp-mode)
(defun zil/link-file-open-hook ()
    "for link files' major-mode in dot-file"
    (let* ((bn (buffer-file-name))
    (dot-name (concat "." (file-name-base bn)))
    (mode (assoc-default dot-name auto-mode-alist 'string-match)))
    (if (and (string= "link" (file-name-extension bn)))
    (string-match-p "dot" bn))
    (and mode (set-auto-mode-0 mode t))))

    (add-hook 'find-file-hook 'zil/link-file-open-hook)


; No wrapping of text
(setq-default truncate-lines nil)

; Show line numbers
(add-hook 'prog-mode-hook 'column-number-mode)
(defun enable-line-numbers ()
    (setq display-line-numbers t))
(if (< emacs-major-version 26)
    (add-hook 'prog-mode-hook 'linum-mode)
    (add-hook 'prog-mode-hook 'enable-line-numbers)
)

;; Graphical settings
; Font size
(set-face-attribute 'default nil :height 120)

; Hide menu bar
(tool-bar-mode -1)
(menu-bar-mode -1)

; Hide startup splash screen
(setq inhibit-startup-message t)
(setq initial-scratch-message nil)

; Stop cursor from blinking
(blink-cursor-mode 0)

; Color theme: gruvbox
(load-theme 'gruvbox-dark-hard t)

; Use spaces of course, dont be a maniac and use tabs
(setq-default indent-tabs-mode nil)

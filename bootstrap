#!/bin/bash
#
# update submodules
git submodule init
git submodule update

# Inspired by (stolen from) https://github.com/holman/dotfiles
if [ $# -eq 1 ]
then
    # for local configuration files (named .symlink.configuration) we need an argument to this script
    SYSTEM_NAME=$1
else
    SYSTEM_NAME=""
fi

cd "$(dirname "$0")"
DOTFILES_ROOT=$(pwd)

echo ''

info () {
  printf "  [ \033[00;34m..\033[0m ] $1"
}

user () {
  printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

link_file () {
  local src=$1 dst=$2

  local overwrite=
  local backup=
  local skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        user "File already exists: $(basename "$src"), what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

install_cf () {
  info 'installing config-files\n'
  local overwrite_all=false backup_all=false skip_all=false

  # These files should always be symlinked
  resultsGlobal=$(find "$DOTFILES_ROOT/" -name '*.symlink')
  if [ "$SYSTEM_NAME" != "" ] 
  then
      # These files should be symlinked since they end with the correct configuration
      resultsSystem=$(find "$DOTFILES_ROOT/" -name "*.symlink.$SYSTEM_NAME")
  else
      resultsSystem=() # Dont do anything
  fi
  # Apparently concatenating arrays like this:
  # results=("${resultsGlobal[@]}" "${resultsSystem[@]}")
  # and looping over both will somehow treat them as a multi-dimensional array (i.e. only loop
  # twice) and i seem to be the only person in the world who wants to do this so lets just
  # create a big array by appending to it one by one. Dont we just love bash
  results=()
  for src in "${resultsGlobal[@]}"
  do
      results+=($src)
  done
  for src in "${resultsSystem[@]}"
  do
      results+=($src)
  done
  for src in "${results[@]}"
  do
    dst=${src%.*}
    echo "-----"
    if [[ "$dst" =~ "symlink" ]]; then # If there is still a dot left we need to remove it (happens with system specific files since they contain two dots)
        dst=${dst%.*}
    fi
    dst="$HOME/.$(basename ${dst})"
    echo "$src"
    echo "$dst"
    link_file "$src" "$dst"
  done

  # Link the files to ~/.config/...
  resultsConfig=$(find "$DOTFILES_ROOT/" -name '*.config')
  for src in "${resultsConfig[@]}"
  do
    dst=${src%.*}
    echo "-----"
    if [[ "$dst" =~ "config" ]]; then # If there is still a dot left we need to remove it (happens with system specific files since they contain two dots)
        dst=${dst%.*}
    fi
    dst="$HOME/.config/$(basename ${dst})"
    echo "$src"
    echo "$dst"
    link_file "$src" "$dst"
  done
  mkdir -p $HOME/.config
  for src in $(find "$DOTFILES_ROOT/" -name '*.symlink-config')
  do
    dst="$HOME/.config/$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
}

install_cf

echo ''
echo '  All symlinks installed!'
echo ''

# find the installers and run them iteratively
for installer in $(find "$DOTFILES_ROOT/" -name "install*.sh") ; do
    echo $installer
    info "Running '${installer}'"
    bash -c "${installer}"
    if [[ $? ]]; then
        success "successfully ran $installer"
    else
        fail "failed to run $installer"
    fi
done

echo ''
echo '  All install scripts completed!'
echo ''
